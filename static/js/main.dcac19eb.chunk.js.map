{"version":3,"sources":["img/anemometer.jpg","img/thunderstorm.jpg","img/drizzle.jpg","img/rain.jpg","img/snow.jpg","img/clearSky.jpg","img/clouds.jpg","img/mist.jpg","img/smoke.jpg","img/haze.jpg","img/dust.jpg","img/fog.jpg","img/squall.jpg","img/tornado.jpg","components/Header.js","components/Form.js","components/Results.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","Fragment","className","Form","props","value","onChange","change","type","placeholder","Results","_props$state","state","date","conditions","detailedConditions","sunrise","sunset","temperature","pressure","humidity","wind","clouds","city","sunriseTime","Date","toLocaleTimeString","sunsetTime","App","error","handleInputForm","e","console","log","target","_this","setState","prevProps","prevState","_this2","this","length","API","concat","fetch","then","response","ok","Error","json","data","time","toLocaleString","weather","main","description","sys","temp","speed","all","catch","bgc","backgroundImage","anemometer","thunderstorm","drizzle","rain","snow","clearSky","mist","smoke","haze","dust","fog","squall","tornado","style","components_Header","components_Form","components_Results","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sOCazBC,SAXA,WACX,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACfJ,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,oECKOG,EAVF,SAACC,GACZ,OACEN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACfJ,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAOK,MAAOD,EAAMC,MAAOC,SAAUF,EAAMG,OAAQC,KAAK,OAAOC,YAAY,wBCuDlEC,EA3DC,SAACN,GAAU,IAAAO,EAarBP,EAAMQ,MAXRC,EAFuBF,EAEvBE,KACAC,EAHuBH,EAGvBG,WACAC,EAJuBJ,EAIvBI,mBACCC,EALsBL,EAKtBK,QACDC,EANuBN,EAMvBM,OACAC,EAPuBP,EAOvBO,YACAC,EARuBR,EAQvBQ,SACAC,EATuBT,EASvBS,SACAC,EAVuBV,EAUvBU,KACAC,EAXuBX,EAWvBW,OACAC,EAZuBZ,EAYvBY,KAGIC,EAAc,IAAIC,KAAe,IAAVT,GAAgBU,qBACvCC,EAAa,IAAIF,KAAc,IAATR,GAAeS,qBAE3C,OACE5B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,6CAAoCF,EAAAC,EAAAC,cAAA,gBAAQuB,EAAR,MACpCzB,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,YAAOa,EAAP,KAAV,KAEAf,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,gCACsB,IACpBF,EAAAC,EAAAC,cAAA,YACGc,EADH,MACkBC,GACV,KAEVjB,EAAAC,EAAAC,cAAA,sBACWF,EAAAC,EAAAC,cAAA,YAAOwB,EAAP,MAEX1B,EAAAC,EAAAC,cAAA,qBACUF,EAAAC,EAAAC,cAAA,YAAO2B,GAAmB,KAEpC7B,EAAAC,EAAAC,cAAA,0BACeF,EAAAC,EAAAC,cAAA,YAAOkB,EAAP,WAEfpB,EAAAC,EAAAC,cAAA,uBACYF,EAAAC,EAAAC,cAAA,YAAOmB,EAAP,SAEZrB,EAAAC,EAAAC,cAAA,uBACYF,EAAAC,EAAAC,cAAA,YAAOoB,EAAP,OAEZtB,EAAAC,EAAAC,cAAA,yBACcF,EAAAC,EAAAC,cAAA,YAAOqB,EAAP,SAEdvB,EAAAC,EAAAC,cAAA,qBACUF,EAAAC,EAAAC,cAAA,YAAOsB,EAAP,OAEVxB,EAAAC,EAAAC,cAAA,yPCiGK4B,6MA7GbhB,MAAQ,CACNP,MAAO,GACPkB,KAAM,GACNT,WAAY,GACZC,mBAAoB,GACpBC,QAAS,GACTC,OAAQ,GACRC,YAAa,GACbC,SAAU,GACVC,SAAU,GACVC,KAAM,GACNC,OAAQ,GACRO,OAAO,KAGTC,gBAAkB,SAACC,GACjBC,QAAQC,IAAIF,EAAEG,OAAO7B,OAErB8B,EAAKC,SAAS,CACZ/B,MAAO0B,EAAEG,OAAO7B,2FAIDgC,EAAWC,GAAW,IAAAC,EAAAC,KACvC,GAAgC,IAA5BA,KAAK5B,MAAMP,MAAMoC,QACjBH,EAAUjC,QAAUmC,KAAK5B,MAAMP,MAAO,CACxC,IAAMqC,EAAG,oDAAAC,OACPH,KAAK5B,MAAMP,MADJ,WAAAsC,OA9BA,mCA8BA,iBAITC,MAAMF,GACHG,KAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,oBAEbH,KAAK,SAACC,GAAD,OAAcA,EAASG,SAC5BJ,KAAK,SAACK,GACL,IAAMC,GAAO,IAAI1B,MAAO2B,iBACxBb,EAAKH,SAAS,SAACxB,GAAD,MAAY,CACxBiB,OAAO,EACPhB,KAAMsC,EACNrC,WAAYoC,EAAKG,QAAQ,GAAGC,KAC5BvC,mBAAoBmC,EAAKG,QAAQ,GAAGE,YACpCvC,QAASkC,EAAKM,IAAIxC,QAClBC,OAAQiC,EAAKM,IAAIvC,OACjBC,YAAagC,EAAKI,KAAKG,KACvBtC,SAAU+B,EAAKI,KAAKnC,SACpBC,SAAU8B,EAAKI,KAAKlC,SACpBC,KAAM6B,EAAK7B,KAAKqC,MAChBpC,OAAQ4B,EAAK5B,OAAOqC,IACpBpC,KAAMX,EAAMP,WAGfuD,MAAM,WACLrB,EAAKH,SAAS,SAACE,GAAD,MAAgB,CAC5BT,OAAO,EACPN,KAAMe,EAAUjC,6CAMjB,IACDS,EAAc0B,KAAK5B,MAAnBE,WACF+C,EAAM,CACRC,gBAAe,OAAAnB,OAASoB,IAAT,MA+BjB,MA5BkB,iBAAfjD,EACD+C,EAAIC,gBAAJ,OAAAnB,OAA6BqB,IAA7B,KACsB,YAAflD,EACP+C,EAAIC,gBAAJ,OAAAnB,OAA6BsB,IAA7B,KACsB,SAAfnD,EACP+C,EAAIC,gBAAJ,OAAAnB,OAA6BuB,IAA7B,KACsB,SAAfpD,EACP+C,EAAIC,gBAAJ,OAAAnB,OAA6BwB,IAA7B,KACsB,UAAfrD,EACP+C,EAAIC,gBAAJ,OAAAnB,OAA6ByB,IAA7B,KACsB,WAAftD,EACP+C,EAAIC,gBAAJ,OAAAnB,OAA6BrB,IAA7B,KACsB,SAAfR,EACP+C,EAAIC,gBAAJ,OAAAnB,OAA6B0B,IAA7B,KACsB,UAAfvD,EACP+C,EAAIC,gBAAJ,OAAAnB,OAA6B2B,IAA7B,KACsB,SAAfxD,EACP+C,EAAIC,gBAAJ,OAAAnB,OAA6B4B,IAA7B,KACsB,SAAfzD,EACP+C,EAAIC,gBAAJ,OAAAnB,OAA6B6B,IAA7B,KACsB,QAAf1D,EACP+C,EAAIC,gBAAJ,OAAAnB,OAA6B8B,IAA7B,KACsB,WAAf3D,EACP+C,EAAIC,gBAAJ,OAAAnB,OAA6B+B,IAA7B,KACsB,YAAf5D,IACP+C,EAAIC,gBAAJ,OAAAnB,OAA6BgC,IAA7B,MAKA7E,EAAAC,EAAAC,cAAA,OAAKE,UAAU,MAAM0E,MAAOf,GAC1B/D,EAAAC,EAAAC,cAAC6E,EAAD,MACA/E,EAAAC,EAAAC,cAAC8E,EAAD,CAAMzE,MAAOmC,KAAK5B,MAAMP,MAAOE,OAAQiC,KAAKV,kBAC5ChC,EAAAC,EAAAC,cAAC+E,EAAD,CAASnE,MAAO4B,KAAK5B,gBA1GXoE,aC3BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzF,EAAAC,EAAAC,cAACwF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC","file":"static/js/main.dcac19eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/anemometer.aa33c466.jpg\";","module.exports = __webpack_public_path__ + \"static/media/thunderstorm.fb95fb97.jpg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle.a2f6f647.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain.9d6a80dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow.3a70ab55.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clearSky.e5604527.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clouds.80f03ece.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mist.2982b52d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/smoke.63c25cea.jpg\";","module.exports = __webpack_public_path__ + \"static/media/haze.30c44849.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dust.3d7b267f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fog.afd4c23b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/squall.d0e1fd36.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tornado.d012d229.jpg\";","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return ( \r\n        <>\r\n        <div className=\"header\">\r\n        <h1>Welcome to Weather App</h1>\r\n        <h2>Check current weather conditions for your location</h2>\r\n        </div>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <div className=\"form\">\r\n    <form>\r\n      <input value={props.value} onChange={props.change} type=\"text\" placeholder=\"Enter city name \"/>\r\n      </form>\r\n      </div> \r\n   );\r\n}\r\n \r\nexport default Form;","import React from \"react\";\r\n\r\nconst Results = (props) => {\r\n  const {\r\n    date,\r\n    conditions,\r\n    detailedConditions,\r\n     sunrise,\r\n    sunset,\r\n    temperature,\r\n    pressure,\r\n    humidity,\r\n    wind,\r\n    clouds,\r\n    city\r\n  } = props.state;\r\n\r\n  const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n  const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"results\">\r\n        <h2> Current weather conditions for <span> {city} </span></h2>\r\n        <h2>Date: <span>{date} </span> </h2>\r\n      \r\n        <ul>\r\n          <li>\r\n            Weather conditions:{\" \"}\r\n            <span>\r\n              {conditions} - {detailedConditions}\r\n            </span>{\" \"}\r\n          </li>\r\n          <li>\r\n            Sunrise: <span>{sunriseTime} </span>\r\n          </li>\r\n          <li>\r\n            Sunset: <span>{sunsetTime}</span>{\" \"}\r\n          </li>\r\n          <li>\r\n            Temperature: <span>{temperature} &#176;C</span>\r\n          </li>\r\n          <li>\r\n            Pressure: <span>{pressure} hPa</span>\r\n          </li>\r\n          <li>\r\n            Humidity: <span>{humidity} %</span>\r\n          </li>\r\n          <li>\r\n            Wind speed: <span>{wind} m/s</span>\r\n          </li>\r\n          <li>\r\n            Clouds: <span>{clouds} %</span>\r\n          </li>\r\n          <li />\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","import React, { Component } from \"react\";\nimport \"../styles/App.css\";\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport Results from \"./Results\";\nimport anemometer from \"../img/anemometer.jpg\"\nimport thunderstorm from \"../img/thunderstorm.jpg\" \nimport drizzle from \"../img/drizzle.jpg\"\nimport rain from \"../img/rain.jpg\"\nimport snow from \"../img/snow.jpg\"\nimport clearSky from \"../img/clearSky.jpg\"\nimport clouds from \"../img/clouds.jpg\"\nimport mist from \"../img/mist.jpg\"\nimport smoke from \"../img/smoke.jpg\"\nimport haze from \"../img/haze.jpg\"\nimport dust from \"../img/dust.jpg\"\nimport fog from \"../img/fog.jpg\"\nimport squall from \"../img/squall.jpg\"\nimport tornado from \"../img/tornado.jpg\"\n\n  /*data weather[0].main - \nThunderstorm\nDrizzle\nRain\nSnow\nClear\nClouds\nMist\nSmoke\nHaze\nDust\nFog\nSand\nAsh\nSquall\nTornado\n*/\n\nconst APIkey = \"d3334eb120bec7fa718c730d966bf414\";\nclass App extends Component {\n\n\n  state = {\n    value: \"\",\n    city: \"\",\n    conditions: \"\",\n    detailedConditions: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temperature: \"\",\n    pressure: \"\",\n    humidity: \"\",\n    wind: \"\",\n    clouds: \"\",\n    error: false\n  };\n\n  handleInputForm = (e) => {\n    console.log(e.target.value);\n\n    this.setState({\n      value: e.target.value\n    });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.value.length === 0) return;\n    if (prevState.value !== this.state.value) {\n      const API = `http://api.openweathermap.org/data/2.5/weather?q=${\n        this.state.value\n      }&APPID=${APIkey}&units=metric`;\n\n      fetch(API)\n        .then((response) => {\n          if (response.ok) {\n            return response;\n          }\n          throw Error(\"City not found\");\n        })\n        .then((response) => response.json())\n        .then((data) => {\n          const time = new Date().toLocaleString();\n          this.setState((state) => ({\n            error: false,\n            date: time,\n            conditions: data.weather[0].main,\n            detailedConditions: data.weather[0].description,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temperature: data.main.temp,\n            pressure: data.main.pressure,\n            humidity: data.main.humidity,\n            wind: data.wind.speed,\n            clouds: data.clouds.all,\n            city: state.value\n          }));\n        })\n        .catch(() => {\n          this.setState((prevState) => ({\n            error: true,\n            city: prevState.value\n          }));\n        });\n    }\n  }\n\n  render() {\n    const{conditions} = this.state\n    let bgc = {\n      backgroundImage: `url(${anemometer})`\n    }\n\n    if(conditions === \"Thunderstorm\"){\n      bgc.backgroundImage = `url(${thunderstorm})`\n    }else if(conditions === \"Drizzle\"){\n      bgc.backgroundImage = `url(${drizzle})`\n    }else if(conditions === \"Rain\"){\n      bgc.backgroundImage = `url(${rain})`\n    }else if(conditions === \"Snow\"){\n      bgc.backgroundImage = `url(${snow})`\n    }else if(conditions === \"Clear\"){\n      bgc.backgroundImage = `url(${clearSky})`\n    }else if(conditions === \"Clouds\"){\n      bgc.backgroundImage = `url(${clouds})`\n    }else if(conditions === \"Mist\"){\n      bgc.backgroundImage = `url(${mist})`\n    }else if(conditions === \"Smoke\"){\n      bgc.backgroundImage = `url(${smoke})`\n    }else if(conditions === \"Haze\"){\n      bgc.backgroundImage = `url(${haze})`\n    }else if(conditions === \"Dust\"){\n      bgc.backgroundImage = `url(${dust})`\n    }else if(conditions === \"Fog\"){\n      bgc.backgroundImage = `url(${fog})`\n    }else if(conditions === \"Squall\"){\n      bgc.backgroundImage = `url(${squall})`\n    }else if(conditions === \"Tornado\"){\n      bgc.backgroundImage = `url(${tornado})`\n    }\n\n    return (\n   \n      <div className=\"App\" style={bgc}>\n        <Header />\n        <Form value={this.state.value} change={this.handleInputForm} />\n        <Results state={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}